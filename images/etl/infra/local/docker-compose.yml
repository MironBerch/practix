services:

  etl:
    restart: always
    build: ../..
    command: >
      sh -c "cd /app/src/
      && python main.py"
    volumes:
      - ../..:/app
    environment:
      - "SECRET_KEY=secretkey"
      - "DB_NAME=postgres"
      - "DB_USER=postgres"
      - "DB_PASSWORD=postgres"
      - "DB_HOST=movies_db"
      - "DB_PORT=5432"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
    depends_on:
      movies_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elastic:
        condition: service_healthy

  movies_db:
    build: ../../infra/postgres/
    restart: always
    ports:
      - "5432:5432"
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
      - "POSTGRES_DB=postgres"
    volumes:
        - movies_db_volume:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready --dbname=postgres --username=postgres
      interval: 5s
      timeout: 5s
      retries: 100


  elastic:
    image: elasticsearch:8.13.0
    expose:
      - "9200"
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ports:
      - "9200:9200"
    healthcheck:
      test: curl -s http://elastic:9200 >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 100

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 100

  kibana:
    image: kibana:8.16.1
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elastic:9200

volumes:
  movies_db_volume:
