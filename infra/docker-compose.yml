services:

  #===============================================================
  #                         APPLICATIONS
  #===============================================================
  admin_panel:
    restart: always
    build: ../images/admin-panel/
    command: >
      sh -c "cd /app/src/
      && mkdir -p media
      && python manage.py collectstatic --noinput
      && python manage.py migrate --noinput
      && python manage.py createsuperuser --noinput || true
      && gunicorn --reload -c ../infra/gunicorn/gunicorn_config.py config.wsgi:application"
    expose:
      - "8000"
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/src/static/
      - media_volume:/app/src/media/
    environment:
      - "DJANGO_SUPERUSER_USERNAME=${MOVIES_DJANGO_SUPERUSER_USERNAME}"
      - "DJANGO_SUPERUSER_EMAIL=${MOVIES_DJANGO_SUPERUSER_EMAIL}"
      - "DJANGO_SUPERUSER_PASSWORD=${MOVIES_DJANGO_SUPERUSER_PASSWORD}"
      - "SECRET_KEY=${SECRET_KEY}"
      - "DEBUG=False"
      - "DB_NAME=${MOVIES_DB_NAME}"
      - "DB_USER=${MOVIES_DB_USER}"
      - "DB_PASSWORD=${MOVIES_DB_PASSWORD}"
      - "DB_HOST=movies_db"
      - "DB_PORT=5432"
    depends_on:
      - movies_db

  movies_api:
    restart: always
    build: ../images/async-api/
    command: >
      sh -c "cd /app/src/
      && python main.py"
    environment:
      - "FASTAPI_PORT=3000"
      - "ELASTIC_HOST=elastic"
      - "ELASTIC_PORT=9200"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=1"
    expose:
      - "3000"
    ports:
      - "3000:3000"
    depends_on:
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy

  auth:
    restart: always
    build: ../images/auth/
    command: >
      sh -c "cd /app/src/
      && flask --app manage:create_app migrate
      && gunicorn --bind 0.0.0.0:5000 'manage:create_app()'"
    expose:
      - "5000"
    ports:
      - "5000:5000"
    environment:
      - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
      - "SECRET_KEY=${SECRET_KEY}"
      - "FLASK_PORT=5000"
      - "DEBUG=False"
      - "DB_NAME=${AUTH_DB_NAME}"
      - "DB_USER=${AUTH_DB_USER}"
      - "DB_PASSWORD=${AUTH_DB_PASSWORD}"
      - "DB_HOST=auth_db"
      - "DB_PORT=5432"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=1"
      - "CELERY_BROKER_URL=redis://redis:6379/0"
      - "CELERY_RESULT_BACKEND=redis://redis:6379/0"
      - "MAIL_SERVER=${MAIL_SERVER}"
      - "MAIL_PORT=${MAIL_PORT}"
      - "MAIL_USERNAME=${MAIL_USERNAME}"
      - "MAIL_PASSWORD=${MAIL_PASSWORD}"

  auth_celery:
    restart: always
    build: ../images/auth/
    command: >
      sh -c "cd /app/src/
      && celery -A run_celery worker -l info"
    environment:
      - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
      - "SECRET_KEY=${SECRET_KEY}"
      - "FLASK_PORT=5000"
      - "DEBUG=False"
      - "DB_NAME=${AUTH_DB_NAME}"
      - "DB_USER=${AUTH_DB_USER}"
      - "DB_PASSWORD=${AUTH_DB_PASSWORD}"
      - "DB_HOST=auth_db"
      - "DB_PORT=5432"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=1"
      - "CELERY_BROKER_URL=redis://redis:6379/0"
      - "CELERY_RESULT_BACKEND=redis://redis:6379/0"
      - "MAIL_SERVER=${MAIL_SERVER}"
      - "MAIL_PORT=${MAIL_PORT}"
      - "MAIL_USERNAME=${MAIL_USERNAME}"
      - "MAIL_PASSWORD=${MAIL_PASSWORD}"
    depends_on:
      - auth
      - auth_db
      - redis

  auth_flower:
    build: ../images/auth/
    environment:
      - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
      - "SECRET_KEY=${SECRET_KEY}"
      - "FLASK_PORT=5000"
      - "DEBUG=False"
      - "DB_NAME=${AUTH_DB_NAME}"
      - "DB_USER=${AUTH_DB_USER}"
      - "DB_PASSWORD=${AUTH_DB_PASSWORD}"
      - "DB_HOST=auth_db"
      - "DB_PORT=5432"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=1"
      - "CELERY_BROKER_URL=redis://redis:6379/0"
      - "CELERY_RESULT_BACKEND=redis://redis:6379/0"
      - "MAIL_SERVER=${MAIL_SERVER}"
      - "MAIL_PORT=${MAIL_PORT}"
      - "MAIL_USERNAME=${MAIL_USERNAME}"
      - "MAIL_PASSWORD=${MAIL_PASSWORD}"
    restart: always
    ports:
      - "5555:5555"
    command: >
      sh -c "cd /app/src/
      && celery -A run_celery flower --port=5555 --url_prefix=/celery"
    depends_on:
      - auth
      - auth_db
      - redis

  etl:
    restart: always
    build: ../images/etl/
    command: >
      sh -c "cd /app/src/
      && python main.py"
    environment:
      - "SECRET_KEY=${SECRET_KEY}"
      - "DB_NAME=${MOVIES_DB_NAME}"
      - "DB_USER=${MOVIES_DB_USER}"
      - "DB_PASSWORD=${MOVIES_DB_PASSWORD}"
      - "DB_HOST=movies_db"
      - "DB_PORT=5432"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
    depends_on:
      movies_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elastic:
        condition: service_healthy

  movies_ugc:
    restart: always
    build: ../images/ugc/
    command: >
      sh -c "cd /app/src/
      && python main.py"
    environment:
      - "FASTAPI_PORT=4000"
      - "MONGO_PORT=27017"
      - "DEBUG=False"
      - "JWT_SECRET_KEY=${JWT_SECRET_KEY}"
    expose:
      - "4000"
    ports:
      - "4000:4000"
    depends_on:
      mongo:
        condition: service_healthy

  #===============================================================
  #                          DATASTORES
  #===============================================================
  elastic:
    image: elasticsearch:8.13.0
    expose:
      - "9200"
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    healthcheck:
      test: curl -s http://elastic:9200 >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 100

  movies_db:
    build: ../images/etl/infra/postgres/
    restart: always
    ports:
      - "5432:5432"
    environment:
      - "POSTGRES_USER=${MOVIES_DB_USER}"
      - "POSTGRES_PASSWORD=${MOVIES_DB_PASSWORD}"
      - "POSTGRES_DB=${MOVIES_DB_NAME}"
    volumes:
        - movies_db_volume:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready --dbname=postgres --username=postgres
      interval: 5s
      timeout: 5s
      retries: 100

  mongo:
    image: mongo:8.0.1
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 5s
      timeout: 5s
      retries: 100

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 100

  auth_db:
    image: postgres:16
    restart: always
    ports:
      - "5433:5432"
    environment:
      - "POSTGRES_USER=${AUTH_DB_USER}"
      - "POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}"
      - "POSTGRES_DB=${AUTH_DB_NAME}"
    volumes:
        - auth_db_volume:/var/lib/postgresql/data/

  kibana:
    image: kibana:8.13.0
    ports:
      - "5601:5601"
    environment:
      - "ELASTICSEARCH_HOSTS=http://elastic:9200"
    depends_on:
      elastic:
        condition: service_healthy

  nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/src/static
      - media_volume:/app/src/media
    ports:
      - "80:80"
    depends_on:
      - movies_api

volumes:
  movies_db_volume:
  auth_db_volume:
  static_volume:
  media_volume:
